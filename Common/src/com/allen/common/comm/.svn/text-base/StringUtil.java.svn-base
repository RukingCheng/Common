package com.allen.common.comm;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StringUtil {
	/**
	 * 处理空字符串
	 * 
	 * @param str
	 * @return String
	 */
	public static String doEmpty(String str) {
		return doEmpty(str, "");
	}

	/**
	 * 处理空字符串
	 * 
	 * @param str
	 * @param defaultValue
	 * @return String
	 */
	public static String doEmpty(String str, String defaultValue) {
		if (str == null || str.equalsIgnoreCase("null")
				|| str.trim().equals("") || str.trim().equals("－请选择－")) {
			str = defaultValue;
		} else if (str.startsWith("null")) {
			str = str.substring(4, str.length());
		}
		return str.trim();
	}

	/**
	 * 请选择
	 */
	final static String PLEASE_SELECT = "请选择...";

	public static boolean notEmpty(Object o) {
		return o != null && !"".equals(o.toString().trim())
				&& !"null".equalsIgnoreCase(o.toString().trim())
				&& !"undefined".equalsIgnoreCase(o.toString().trim())
				&& !PLEASE_SELECT.equals(o.toString().trim());
	}

	public static boolean empty(Object o) {
		return o == null || "".equals(o.toString().trim())
				|| "null".equalsIgnoreCase(o.toString().trim())
				|| "undefined".equalsIgnoreCase(o.toString().trim())
				|| PLEASE_SELECT.equals(o.toString().trim());
	}

	public static boolean num(Object o) {
		int n = 0;
		try {
			n = Integer.parseInt(o.toString().trim());
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		if (n > 0) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean decimal(Object o) {
		double n = 0;
		try {
			n = Double.parseDouble(o.toString().trim());
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		if (n > 0.0) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 给JID返回用户名
	 * 
	 * @param Jid
	 * @return
	 */
	public static String getUserNameByJid(String Jid) {
		if (empty(Jid)) {
			return null;
		}
		if (!Jid.contains("@")) {
			return Jid;
		}
		return Jid.split("@")[0];
	}

	/**
	 * 给用户名返回JID
	 * 
	 * @param jidFor
	 *            域名//ysj-pc
	 * @param userName
	 * @return
	 */
	public static String getJidByName(String userName, String jidFor) {
		if (empty(jidFor) || empty(jidFor)) {
			return null;
		}
		return userName + "@" + jidFor;
	}

	/**
	 * 根据给定的时间字符串，返回月 日 时 分 秒
	 * 
	 * @param allDate
	 *            like "yyyy-MM-dd hh:mm:ss SSS"
	 * @return
	 */
	public static String getMonthTomTime(String allDate) {
		return allDate.substring(5, 19);
	}

	/**
	 * 根据给定的时间字符串，返回月 日 时 分 月到分钟
	 * 
	 * @param allDate
	 *            like "yyyy-MM-dd hh:mm:ss SSS"
	 * @return
	 */
	public static String getMonthTime(String allDate) {
		return allDate.substring(5, 16);
	}
	
	/**
	 * Phone的判断
	 * @param mobiles
	 * @return
	 */
	public static boolean isMobileNum(String mobiles){   
		String regExp = "^[1]([3][0-9]{1}|([5][0-9]{1})|([8][0-9]{1})|([7][0-9]{1}))[0-9]{8}$";  
		Pattern p = Pattern.compile(regExp);  
		Matcher m = p.matcher(mobiles);  
		return m.find();//boolean  
	}  
	
	/**
	 * Email的判断
	 * @param email
	 * @return
	 */
	public static boolean isEmail(String email){  
        boolean isExist = false;  
       
        Pattern p = Pattern.compile("\\w+.+@(\\w+.)+[a-z]{2,3}");  
        Matcher m = p.matcher(email);  
        boolean b = m.matches();  
        if(b) {  
            System.out.println("有效邮件地址!");  
            isExist=true;  
        } else {  
            System.out.println("无效邮件地址");  
        }  
        return isExist;  
    }  
	
	/**
	 * 得到图片名称
	 * @param url
	 * @return
	 */
	public static String getIconName(String url){
		String str = url.toString();
		 int index = str.lastIndexOf("/")+1;
		 String iconName= str.substring(index);
		 return iconName;
	}
	/**
	 * 得到图片的路径不包括文件本身
	 * @param url
	 * @return
	 */
	public static String getIconUrl(String url){
		String str = url.toString();
		 int end = str.lastIndexOf("/");
		 String uri= str.substring(0,end);
		 return uri;
	}
	
	 /**
	  * 半角转化为全角的方法
	  * @param input
	  * @return
	  */
	 public static String ToSBC(String input) {
	  // 半角转全角：
	  char[] c = input.toCharArray();
	  for (int i = 0; i < c.length; i++) {
	   if (c[i] == 32) {
	    c[i] = (char) 12288;
	    continue;
	   }
	   if (c[i] < 127 && c[i]>32)
	    c[i] = (char) (c[i] + 65248);
	  }
	  return new String(c);
	 }
	 /**
	  *  全角转化为半角的方法
	  * @param input
	  * @return
	  */
	 public static String ToDBC(String input) {
	  char[] c = input.toCharArray();
	  for (int i = 0; i < c.length; i++) {
	   if (isChinese(c[i])) {
	    if (c[i] == 12288) {
	     c[i] = (char) 32;
	     continue;
	    }
	    if (c[i] > 65280 && c[i] < 65375)
	     c[i] = (char) (c[i] - 65248);
	   }
	  }
	  return new String(c);
	 }
	 
	 /**
	  * 利用编码的方式判断字符是否为汉字的方法
	  * @param c
	  * @return
	  */
	 private static boolean isChinese(char c) {
	  Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
	  if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
	    || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
	    || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
	    || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION
	    || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
	    || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
	   return true;
	  }
	  return false;
	 }
	
}
